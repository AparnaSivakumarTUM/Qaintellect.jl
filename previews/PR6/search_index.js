var documenterSearchIndex = {"docs":
[{"location":"optimization/#Sample-Flux-Layer","page":"Sample Flux Layer","title":"Sample Flux Layer","text":"","category":"section"},{"location":"optimization/","page":"Sample Flux Layer","title":"Sample Flux Layer","text":"This example demonstrates the creation of a sample Flux layer.","category":"page"},{"location":"optimization/","page":"Sample Flux Layer","title":"Sample Flux Layer","text":"CurrentModule = Qaintellect\nend","category":"page"},{"location":"optimization/#Example","page":"Sample Flux Layer","title":"Example","text":"","category":"section"},{"location":"optimization/","page":"Sample Flux Layer","title":"Sample Flux Layer","text":"This example shows test code that uses the Flux.gradient() call to calculate the gradients of the Circuit object.","category":"page"},{"location":"optimization/","page":"Sample Flux Layer","title":"Sample Flux Layer","text":"using Flux\nusing Qaintessent\nusing Qaintellect\nusing LinearAlgebra\nusing IterTools: ncycle\n\n# construct parametrized circuit\nrx = RxGate(2π*rand())\nry = RyGate(2π*rand())\n\ncgc = [\n    circuit_gate(1, rx),\n    circuit_gate(1, ry),\n]\n\n# using Pauli-Z matrix as observable\nmeas = [MeasurementOperator([1 0; 0 -1], (1,))]\n\nc = Circuit{1}(cgc, meas)\n\n# We set the initial input as the $\\lvert 0 \\rangle$ state, and the target expectation value of the measurement as $-1$.\nψ = ComplexF64[1, 0]\ne = -1\n\n# create loss function: note that circuit `c` is applied to `x`\nloss(x, y) = Flux.mse(c(x), y)\n\n# gather parameters from Circuit\nparas = Flux.params(c)\n@show(paras)\n\n# define optimizer\nopt = ADAM(0.5)\n\n# set up data for training; using `ncycle()` to repeatedly feed the input quantum state into the training algorithm\ndata = ncycle([(ψ, e)], 128)\n\n# define evaluation function\nevalcb() = @show(loss(ψ, e))\n\n# example: compute gradients\ngrads = gradient(() -> loss(ψ, e), paras)\ngrads[ry.θ]\n\nFlux.train!(loss, paras, data, opt, cb=Flux.throttle(evalcb, 0.01))\n\n# verify output\n@show apply(c, ψ)","category":"page"},{"location":"qaoa/#QAOA-Example","page":"QAOA Example","title":"QAOA Example","text":"","category":"section"},{"location":"qaoa/","page":"QAOA Example","title":"QAOA Example","text":"This examples runs a simple Max-Cut algorithm.","category":"page"},{"location":"qaoa/","page":"QAOA Example","title":"QAOA Example","text":"CurrentModule = Qaintellect\nend","category":"page"},{"location":"qaoa/#Example","page":"QAOA Example","title":"Example","text":"","category":"section"},{"location":"qaoa/","page":"QAOA Example","title":"QAOA Example","text":"using Qaintessent\nusing Qaintellect\nusing LinearAlgebra\nusing Flux\nusing IterTools: ncycle\n# visualization\nusing Plots\nusing LaTeXStrings\n\n# number of vertices\nn = 5\n\n# graph edges corresponding to the above graph\nedges = [(0, 1), (1, 2), (1, 3), (2, 4), (3, 4)];\n\n# generates QAOA layers\nfunction qaoa_layers(p::Int, n::Int, edges::Vector{Tuple{Int,Int}})\n    cgs = CircuitGate[]\n    for _ in 1:p\n        # C operator\n        for e in edges\n            # circuit gate uses 1-based indexing\n            push!(cgs, circuit_gate(e[1] + 1, e[2] + 1, EntanglementZZGate(0.01*randn())))\n        end\n        # B operator\n        for j in 1:n\n           push!(cgs, circuit_gate(j, RxGate(0.01*randn())))\n        end\n    end\n    return cgs\nend\n\n# create measurement operator representing C\nCmatrix = zeros(2^n, 2^n)\nfor edge in edges\n    k1 = circuit_gate(edge[1] + 1, ZGate())\n    k2 = circuit_gate(edge[2] + 1, ZGate())\n    global Cmatrix += 0.5*(I - sparse_matrix([k1, k2], n))\nend\n\nCop = MeasurementOperator(Cmatrix, Tuple(1:n));\n\n# example\ncirc = Circuit{n}(qaoa_layers(2, n, edges), [Cop])\n\n# gather parameters from circuit\nparas = Flux.params(circ)\n\n# there is not actually any input data for training\ndata = ncycle([()], 500)\n\n# define optimizer\nopt = Descent(0.5)\n\n# create equal superposition state\ns_uni = fill(1/√(2^n) + 0.0im, 2^n);\n\n# define evaluation function\nevalcb() = @show(apply(circ, s_uni))\n\n# perform minimization with the negated target function to achieve maximization\nFlux.train!(() -> -apply(circ, s_uni)[1], paras, data, opt, cb=Flux.throttle(evalcb, 0.5));\n\n# corresponding optimized quantum wavefunction\nψ1 = apply(circ.moments, s_uni)\n\ntags = [join(reverse(digits(i, pad=n, base=2))) for i in 0:2^n-1];\nbar(tags, abs2.(ψ1), xticks=:all, xrotation=45, ylabel=L\"|\\psi|^2\", legend=false);","category":"page"},{"location":"flux_integration/#Flux-Integration","page":"Flux Integration","title":"Flux Integration","text":"","category":"section"},{"location":"flux_integration/","page":"Flux Integration","title":"Flux Integration","text":"Qaintellect.jl integrates the various utilities of Qaintessent.jl into Flux.jl. This allows the creation of trainable layers, which can integrated into ML or optimization algorithms.","category":"page"},{"location":"flux_integration/","page":"Flux Integration","title":"Flux Integration","text":"CurrentModule = Qaintellect\nDocTestSetup = quote\n    function ngradient(f, xs::AbstractArray...)\n        grads = zero.(xs)\n        for (x, Δ) in zip(xs, grads), i in 1:length(x)\n            δ = sqrt(eps())\n            tmp = x[i]\n            x[i] = tmp - δ/2\n            y1 = f(xs...)\n            x[i] = tmp + δ/2\n            y2 = f(xs...)\n            x[i] = tmp\n            Δ[i] = (y2-y1)/δ\n            if eltype(x) <: Complex\n                # derivative with respect to imaginary part\n                x[i] = tmp - im*δ/2\n                y1 = f(xs...)\n                x[i] = tmp + im*δ/2\n                y2 = f(xs...)\n                x[i] = tmp\n                Δ[i] += im*(y2-y1)/δ\n            end\n        end\n        return grads\n    end\nend","category":"page"},{"location":"flux_integration/#Example","page":"Flux Integration","title":"Example","text":"","category":"section"},{"location":"flux_integration/","page":"Flux Integration","title":"Flux Integration","text":"This example shows test code that uses the Flux.gradient() call to calculate the gradients of the Circuit object.","category":"page"},{"location":"flux_integration/","page":"Flux Integration","title":"Flux Integration","text":"using Flux\nusing Qaintessent\nusing Qaintellect\nusing LinearAlgebra\n\n# construct parametrized circuit\nN = 4\nrz = RzGate(1.5π)\nps = PhaseShiftGate(0.3)\nry = RyGate(√2)\nn = randn(Float64, 3)\nn /= norm(n)\nrg = RotationGate(0.2π, n)\ncgc = [\n    circuit_gate(3, HadamardGate()),\n    circuit_gate(2, rz, (1, 4)),\n    circuit_gate(2, 3, SwapGate()),\n    circuit_gate(3, ps),\n    circuit_gate(3, rg),\n    circuit_gate(1, ry),\n]\n\n# measurement operators\nmeas = [MeasurementOperator(Matrix{Float64}(I, 2^N, 2^N), Tuple(1:N)), MeasurementOperator(Hermitian(randn(ComplexF64, 2^N, 2^N)), Tuple(1:N))]\nc = Circuit{N}(cgc, meas)\n\n# input quantum state\nψ = randn(ComplexF64, 2^N)\n\n# fictitious gradients of cost function with respect to output quantum state after applying circuit gates\nΔ = 0.1*randn(ComplexF64, 2^N)\n\n# Flux will call pullback function with argument Δ\ngrads = Flux.gradient(() -> real(dot(Δ, apply(c.moments, ψ))), Flux.Params([rz.θ, ps.ϕ, ry.θ, rg.nθ]))\n\n# arguments used implicitly via references\n# ngradient calculates gradients via finite difference, adapted from https://github.com/FluxML/Zygote.jl/blob/master/test/gradcheck.jl \nf(args...) = real(dot(Δ, apply(c.moments, ψ)))\nall(isapprox.(ngradient(f, rz.θ, ps.ϕ, ry.θ, rg.nθ),\n    (grads[rz.θ], grads[ps.ϕ], grads[ry.θ], grads[rg.nθ]), rtol=1e-5, atol=1e-5))\n\n# output\ntrue","category":"page"},{"location":"#Qaintessent.jl-Documentation","page":"Home","title":"Qaintessent.jl Documentation","text":"","category":"section"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"flux_integration.md\", \"qaoa.md\", \"optimization.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Qaintellect","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
